/*
 * Symbol Table
 * A Linked List used to store various information
 * generated by the grammar
 */

#ifndef SYMBOL_TABLE
#define SYMBOL_TABLE

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

//Node for Linked List
//Stores pointer to name and the next node in the list
struct node {
	char* name;
	struct node* next;
};
struct node* table = (struct node*)0;	//Declare start of empty table
struct node* putSymbol();		//Method to add symbol
struct node* getSymbol();		//Method to get symbol

//putSymbol
//Adds a symbol to the symbol table and returns a pointer
//to that new symbol
struct node* putSymbol(char* sName) {
	struct node* temp = (struct node*) malloc(sizeof(struct node));
	temp->name = (char*) malloc(strlen(sName)+1);
	strcpy(temp->name, sName);
	temp->next = (struct node*)table;
	table = temp;
	return temp;
}

//getSymbol
//Returns a pointer to the symbol corresponding to the
//name provided
struct node* getSymbol(char* sName) {
	struct node* temp;
	for(temp = table; temp != (struct node*)0; temp = (struct node*)temp->next)
		if(strcmp(temp->name, sName) == 0)
			return temp;
	return 0;
}

#endif
